name: Selfâ€‘hosted Dependabot

on:
  workflow_dispatch:          # run manually from the Actions tab
  push:
    branches: [ db_test ]
  schedule:
    - cron: '0 5 * * 1'       # 5:00 AM UTC every Monday
  pull_request:
    branches: [ develop ]     # run when someone opens a PR to develop
    types: [ opened, synchronize, reopened ]


jobs:
  run-dependabot:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Checkout to a directory to keep the working dir clean for the update.
        with:
          path: repo
          # When triggered by a PR: use PR's head branch
          # When triggered by push to db_test: use db_test branch
          # When triggered by manual run or schedule: use develop branch
          ref: ${{ 
                 github.event_name == 'pull_request' && github.event.pull_request.head.ref || 
                 github.event_name == 'push' && github.ref_name ||
                 'develop'
               }}

      - name: Download CLI
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo dependabot/cli -p "*linux-amd64.tar.gz"
          tar xzvf *.tar.gz >/dev/null 2>&1
          ./dependabot --version
      
      - name: Run Dependabot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |          
          ./dependabot update \
            -f repo/.github/dependabot/github_actions.yaml \
            --local repo \
            --timeout 20m >> result.jsonl || true
          ./dependabot update \
            -f repo/.github/dependabot/npm_yarn.yaml \
            --local repo \
            --timeout 20m >> result.jsonl || true

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: dependabot-result
          path: result.jsonl

  create-prs:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: run-dependabot
    steps:
      - name: Set target branch
        id: set-branch
        run: |
          # Determine which branch to open PRs against
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs to develop, target the source branch
            echo "target_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
            echo "Target branch set to PR source: ${{ github.event.pull_request.head.ref }}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            # For push events, base PRs on the pushed branch
            echo "target_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "Target branch set to pushed branch: ${{ github.ref_name }}"
          else
            # Default case (schedule, manual run)
            echo "target_branch=develop" >> $GITHUB_OUTPUT
            echo "Target branch set to default: develop"
          fi
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Dynamic ref selection based on trigger type
          ref: ${{ 
                 github.event_name == 'pull_request' && github.event.pull_request.head.ref || 
                 github.event_name == 'push' && github.ref_name ||
                 'develop'
               }}

      - name: Download result
        uses: actions/download-artifact@v4
        with:
          name: dependabot-result

      - name: Setup SSH for GitHub authentication and signing
        run: |
          echo $SSH_KEY_PRIVATE | base64 -d > /tmp/id_ed25519
          echo $SSH_KEY_PUBLIC > /tmp/id_ed25519.pub
          chmod 600 /tmp/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add /tmp/id_ed25519
          
          # Configure SSH to use this key for GitHub
          mkdir -p ~/.ssh
          cat > ~/.ssh/config << EOF
          Host github.com
            User git
            IdentityFile /tmp/id_ed25519
            StrictHostKeyChecking yes
          EOF
          
          # Setup known_hosts to avoid the warning
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          
          # Change from HTTPS to SSH remote URL
          git remote set-url origin git@github.com:PolymeshAssociation/polymesh-portal.git
          
          git config --global gpg.format ssh
          git config --global commit.gpgsign true
          git config --global user.signingkey /tmp/id_ed25519.pub
          git config --global user.email "bot@polymesh.network"
          git config --global user.name "Polymesh Bot"
          mkdir -p ~/.config/git
          echo "${{ vars.DB_EMAIL }} $SSH_KEY_PUBLIC" > ~/.config/git/allowed_signers
          git config --global gpg.ssh.allowedSignersFile ~/.config/git/allowed_signers
        shell: bash
        env:
          SSH_KEY_PRIVATE: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KEY_PUBLIC: ${{ vars.SSH_PUBLIC_KEY }}

      - name: Create PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bash create-pr.sh result.jsonl ${{ steps.set-branch.outputs.target_branch }}

      - name: Clear SSH key
        run: |
          shred /tmp/id_ed25519